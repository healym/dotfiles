#+TITLE: Emacs Config
#+AUTHOR: Matthew Cooper Healy

* Package Management
** Package Repositories
#+BEGIN_SRC emacs-lisp
(require 'package)
(setq package-archives
      '(("MELPA Stable" . "https://stable.melpa.org/packages/")
	("GNU ELPA"     . "https://elpa.gnu.org/packages/")
	("MELPA"        . "https://melpa.org/packages/"))
      package-archive-priorities
      '(("GNU ELPA"     . 10)
	("MELPA"        . 0)))
(package-initialize)

(add-to-list 'load-path "~/.emacs.d/lisp/") ; add local files
#+END_SRC

** use-package
#+BEGIN_SRC emacs-lisp
(eval-when-compile
  (require 'use-package))
#+END_SRC

* Quality of Life Improvements
** Line Numbers
#+BEGIN_SRC emacs-lisp
(if (version<= "26.0.50" emacs-version)
  (global-display-line-numbers-mode)
  (progn
    (global-linum-mode t)
    (setq linum-format "%4d \u2502 ")))
#+END_SRC

** Look
*** Theme
#+BEGIN_SRC emacs-lisp
(use-package atom-one-dark-theme
  :ensure t
  :config
    (load-theme 'atom-one-dark t))
#+END_SRC

*** Modeline
#+BEGIN_SRC emacs-lisp
(use-package doom-modeline
  :ensure t
  :after all-the-icons
  :hook (after-init . doom-modeline-mode))

#+END_SRC

*** Remove Default Trash
#+BEGIN_SRC emacs-lisp
(menu-bar-mode -1)
(scroll-bar-mode -1)
(tool-bar-mode -1)
(setq inhibit-startup-screen t)
#+END_SRC

*** Cursor
#+BEGIN_SRC emacs-lisp
(setq-default cursor-type 'bar)
#+END_SRC

*** Truncate, Don't Wrap
#+BEGIN_SRC emacs-lisp
(set-default 'truncate-lines t)
#+END_SRC

*** Focus Line
#+BEGIN_SRC emacs-lisp
(global-hl-line-mode 1)
#+END_SRC

** Fonts
*** Ligatures
#+BEGIN_SRC emacs-lisp
(when (window-system)
  (set-frame-font "Fira Code"))
(let ((alist '((33 . ".\\(?:\\(?:==\\|!!\\)\\|[!=]\\)")
               (35 . ".\\(?:###\\|##\\|_(\\|[#(?[_{]\\)")
               (36 . ".\\(?:>\\)")
               (37 . ".\\(?:\\(?:%%\\)\\|%\\)")
               (38 . ".\\(?:\\(?:&&\\)\\|&\\)")
               (42 . ".\\(?:\\(?:\\*\\*/\\)\\|\\(?:\\*[*/]\\)\\|[*/>]\\)")
               (43 . ".\\(?:\\(?:\\+\\+\\)\\|[+>]\\)")
               (45 . ".\\(?:\\(?:-[>-]\\|<<\\|>>\\)\\|[<>}~-]\\)")
               (46 . ".\\(?:\\(?:\\.[.<]\\)\\|[.=-]\\)")
               (47 . ".\\(?:\\(?:\\*\\*\\|//\\|==\\)\\|[*/=>]\\)")
               (48 . ".\\(?:x[a-zA-Z]\\)")
               (58 . ".\\(?:::\\|[:=]\\)")
               (59 . ".\\(?:;;\\|;\\)")
               (60 . ".\\(?:\\(?:!--\\)\\|\\(?:~~\\|->\\|\\$>\\|\\*>\\|\\+>\\|--\\|<[<=-]\\|=[<=>]\\||>\\)\\|[*$+~/<=>|-]\\)")
               (61 . ".\\(?:\\(?:/=\\|:=\\|<<\\|=[=>]\\|>>\\)\\|[<=>~]\\)")
               (62 . ".\\(?:\\(?:=>\\|>[=>-]\\)\\|[=>-]\\)")
               (63 . ".\\(?:\\(\\?\\?\\)\\|[:=?]\\)")
               (91 . ".\\(?:]\\)")
               (92 . ".\\(?:\\(?:\\\\\\\\\\)\\|\\\\\\)")
               (94 . ".\\(?:=\\)")
               (119 . ".\\(?:ww\\)")
               (123 . ".\\(?:-\\)")
               (124 . ".\\(?:\\(?:|[=|]\\)\\|[=>|]\\)")
               (126 . ".\\(?:~>\\|~~\\|[>=@~-]\\)")
               )
             ))
  (dolist (char-regexp alist)
    (set-char-table-range composition-function-table (car char-regexp)
                          `([,(cdr char-regexp) 0 font-shape-gstring]))))
#+END_SRC

*** Defaults
#+BEGIN_SRC emacs-lisp
(add-to-list 'default-frame-alist '(font . "IBM Plex Mono-09"))
(set-face-attribute 'default t :font "IBM Plex Mono-09")
(set-face-attribute 'mode-line nil :font "DejaVu Sans Mono-10")
#+END_SRC

* IDE-like Features
** Helm
#+BEGIN_SRC emacs-lisp
(use-package helm
  :ensure t
  :init
    (global-unset-key (kbd "C-x c"))
  :bind (("C-x C-f" . helm-find-files)
         ("M-x" . helm-M-x))
  :custom
    (helm-M-x-fuzzyj-match t)
  :config
    (helm-mode 1))
#+END_SRC

** Projectile
#+BEGIN_SRC emacs-lisp
(use-package projectile
  :after helm
  :ensure t
  :custom
  (projectile-indexing-method 'alien)
  (projectile-enable-caching t)
  :bind-keymap
  ("C-c p" . projectile-command-map)
  :config
  (projectile-global-mode))
#+END_SRC

** Company
#+BEGIN_SRC emacs-lisp
(use-package company
  :ensure t
  :config
    (add-hook 'after-init-hook 'global-company-mode))
#+END_SRC
